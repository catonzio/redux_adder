class Prova4State {

	final int param1;
	final bool param2;
	final Prova3State prova3;

	Prova4State({
		required this.param1,
		required this.param2,
		required this.prova3,
	});

	Prova4State copyWith({
		int? param1,
		bool? param2,
		Prova3State? prova3,
	}) {
		return Prova4State(
			param1: param1 ?? this.param1,
			param2: param2 ?? this.param2,
			prova3: prova3 ?? this.prova3,
		);
	}

	factory Prova4State.initial() {
		return Prova4State(
			param1: 0,
			param2: false,
			prova3: Prova3State.initial(),
		);
	}

	factory Prova4State.fromJson(Map<String, dynamic> json) {
		return Prova4State(
			param1: json.decode(json['param1']),
			param2: json.decode(json['param2']),
			prova3: Prova3State.fromJson(json['prova3']),
		);
	}

	Map<String, dynamic> toJson() => {
		'param1': json.encode(param1),
		'param2': json.encode(param2),
		'prova3': prova3.toJson(),
	};

	@override
	bool operator ==(Object other) => 
		identical(this, other) || 
		other is Prova4State && 
		param1 == other.param1 &&
		param2 == other.param2 &&
		prova3 == other.prova3;

	@override
	int get hashCode => super.hashCode ^ 
		param1.hashCode ^
		param2.hashCode ^
		prova3.hashCode;
}